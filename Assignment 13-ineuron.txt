1.Given two linked list of the same size, the task is to create a new linked list using those linked lists.
 The condition is that the greater node among both linked list will be added to the new linked list.
Input: list1 = 5->2->3->8
list2 = 1->7->4->5
Output: New list = 5->7->4->8

Input:list1 = 2->8->9->3
list2 = 5->3->6->4
Output: New list = 5->8->9->4
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public LinkedList createNewList(LinkedList list1, LinkedList list2) {
        if (list1 == null || list2 == null) {
            return null;
        }

        Node current1 = list1.head;
        Node current2 = list2.head;
        LinkedList newList = new LinkedList();

        while (current1 != null && current2 != null) {
            if (current1.data >= current2.data) {
                newList.insert(current1.data);
            } else {
                newList.insert(current2.data);
            }

            current1 = current1.next;
            current2 = current2.next;
        }

        return newList;
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list1 = new LinkedList();
        LinkedList list2 = new LinkedList();

        // Populate the first linked list
        list1.insert(5);
        list1.insert(2);
        list1.insert(3);
        list1.insert(8);

        // Populate the second linked list
        list2.insert(1);
        list2.insert(7);
        list2.insert(4);
        list2.insert(5);

        LinkedList newList = list1.createNewList(list1, list2);
        System.out.print("New list: ");
        newList.display(); // Output: 5 7 4 8

        // Reset the lists for the second test
        list1 = new LinkedList();
        list2 = new LinkedList();

        // Populate the first linked list
        list1.insert(2);
        list1.insert(8);
        list1.insert(9);
        list1.insert(3);

        // Populate the second linked list
        list2.insert(5);
        list2.insert(3);
        list2.insert(6);
        list2.insert(4);

        newList = list1.createNewList(list1, list2);
        System.out.print("New list: ");
        newList.display(); // Output: 5 8 9 4
    }
}
2.Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should only be traversed once.

For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.

Input:
LinkedList: 
11->11->11->21->43->43->60
Output:
11->21->43->60

Input:
LinkedList: 
10->12->12->25->25->25->34
Output:
10->12->25->34
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void removeDuplicates() {
        if (head == null || head.next == null) {
            return; // No duplicates in an empty list or a list with only one node
        }

        Node current = head;
        while (current != null && current.next != null) {
            if (current.data == current.next.data) {
                current.next = current.next.next;
            } else {
                current = current.next;
            }
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Populate the linked list
        list.insert(11);
        list.insert(11);
        list.insert(11);
        list.insert(21);
        list.insert(43);
        list.insert(43);
        list.insert(60);

        System.out.print("Original list: ");
        list.display(); // Output: 11 11 11 21 43 43 60

        list.removeDuplicates();
        System.out.print("List after removing duplicates: ");
        list.display(); // Output: 11 21 43 60

        // Reset the list for the second test
        list = new LinkedList();

        // Populate the linked list
        list.insert(10);
        list.insert(12);
        list.insert(12);
        list.insert(25);
        list.insert(25);
        list.insert(25);
        list.insert(34);

        System.out.print("Original list: ");
        list.display(); // Output: 10 12 12 25 25 25 34

        list.removeDuplicates();
        System.out.print("List after removing duplicates: ");
        list.display(); // Output: 10 12 25 34
    }
}
3.Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).
Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output:4 2 2 1 8 7 6 5
Explanation:
The first 4 elements 1,2,2,4 are reversed first
and then the next 4 elements 5,6,7,8. Hence, the
resultant linked list is 4->2->2->1->8->7->6->5.

Input:
LinkedList: 1->2->3->4->5
K = 3
Output:3 2 1 5 4
Explanation:
The first 3 elements are 1,2,3 are reversed
first and then elements 4,5 are reversed.Hence,
the resultant linked list is 3->2->1->5->4.
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void reverseInGroups(int k) {
        head = reverseInGroupsUtil(head, k);
    }

    private Node reverseInGroupsUtil(Node head, int k) {
        if (head == null || head.next == null) {
            return head; // No reversal needed for empty list or list with only one node
        }

        Node current = head;
        Node prev = null;
        Node next = null;

        int count = 0;
        // Reverse the first k nodes
        while (current != null && count < k) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }

        // Recursively reverse the remaining nodes
        if (next != null) {
            head.next = reverseInGroupsUtil(next, k);
        }

        return prev;
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Populate the linked list
        list.insert(1);
        list.insert(2);
        list.insert(2);
        list.insert(4);
        list.insert(5);
        list.insert(6);
        list.insert(7);
        list.insert(8);

        System.out.print("Original list: ");
        list.display(); // Output: 1 2 2 4 5 6 7 8

        int k = 4;
        list.reverseInGroups(k);

        System.out.print("List after reversing in groups of " + k + ": ");
        list.display(); // Output: 4 2 2 1 8 7 6 5

        // Reset the list for the second test
        list = new LinkedList();

        // Populate the linked list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);

        System.out.print("Original list: ");
        list.display(); // Output: 1 2 3 4 5

        k = 3;
        list.reverseInGroups(k);

        System.out.print("List after reversing in groups of " + k + ": ");
        list.display(); // Output: 3 2 1 5 4
    }
}
4.Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. Give the complexity of your algorithm.
Inputs:   1->2->3->4->5->6->7->8->9->NULL and k = 3
Output:   3->2->1->4->5->6->9->8->7->NULL.
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void reverseAlternateKNodes(int k) {
        head = reverseAlternateKNodesUtil(head, k);
    }

    private Node reverseAlternateKNodesUtil(Node head, int k) {
        if (head == null || head.next == null || k <= 1) {
            return head; // No reversal needed for empty list, list with only one node, or k <= 1
        }

        Node current = head;
        Node prev = null;
        Node next = null;

        int count = 0;
        // Reverse the first k nodes
        while (current != null && count < k) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
            count++;
        }

        // Skip the next k nodes (alternate k nodes)
        count = 0;
        while (current != null && count < k) {
            prev = current;
            current = current.next;
            count++;
        }

        // Recursively reverse the next alternate k nodes
        if (current != null) {
            prev.next = reverseAlternateKNodesUtil(current, k);
        }

        return prev;
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Populate the linked list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);
        list.insert(6);
        list.insert(7);
        list.insert(8);
        list.insert(9);

        System.out.print("Original list: ");
        list.display(); // Output: 1 2 3 4 5 6 7 8 9

        int k = 3;
        list.reverseAlternateKNodes(k);

        System.out.print("List after reversing alternate " + k + " nodes: ");
        list.display(); // Output: 3 2 1 4 5 6 9 8 7
    }
}
5.Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.
Input:   1->2->3->5->2->10, key = 2
Output:  1->2->3->5->10
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
        } else {
            Node current = head;
            while (current.next != null) {
                current = current.next;
            }
            current.next = newNode;
        }
    }

    public void deleteLastOccurrence(int key) {
        if (head == null) {
            return;
        }

        Node lastOccurrence = null;
        Node prevLastOccurrence = null;
        Node current = head;
        Node prev = null;

        while (current != null) {
            if (current.data == key) {
                lastOccurrence = current;
                prevLastOccurrence = prev;
            }
            prev = current;
            current = current.next;
        }

        if (lastOccurrence != null) {
            if (prevLastOccurrence == null) {
                // Handle case when last occurrence is the head node
                head = head.next;
            } else {
                prevLastOccurrence.next = lastOccurrence.next;
            }
        }
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        // Populate the linked list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(5);
        list.insert(2);
        list.insert(10);

        int key = 2;

        System.out.print("Original list: ");
        list.display(); // Output: 1 2 3 5 2 10

        list.deleteLastOccurrence(key);

        System.out.print("List after deleting last occurrence of " + key + ": ");
        list.display(); // Output: 1 2 3 5 10
    }
}
6.Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the lists (in place) and return the head of the merged list.
Input: a: 5->10->15, b: 2->3->20

Output: 2->3->5->10->15->20

Input: a: 1->1, b: 2->4

Output: 1->1->2->4
ans-:
class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class MergeSortedLists {
    public static Node mergeLists(Node a, Node b) {
        // Base cases: if either list is empty, return the other list
        if (a == null) {
            return b;
        }
        if (b == null) {
            return a;
        }

        Node result; // Head of the merged list

        // Choose the smaller value as the head of the merged list
        if (a.data <= b.data) {
            result = a;
            a = a.next;
        } else {
            result = b;
            b = b.next;
        }

        Node current = result; // Pointer to the current node in the merged list

        // Merge the remaining nodes in the two lists
        while (a != null && b != null) {
            if (a.data <= b.data) {
                current.next = a;
                a = a.next;
            } else {
                current.next = b;
                b = b.next;
            }
            current = current.next;
        }

        // Attach the remaining nodes of the non-empty list, if any
        if (a != null) {
            current.next = a;
        }
        if (b != null) {
            current.next = b;
        }

        return result;
    }

    public static void display(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the first sorted linked list: 5 -> 10 -> 15
        Node a1 = new Node(5);
        Node a2 = new Node(10);
        Node a3 = new Node(15);
        a1.next = a2;
        a2.next = a3;

        // Create the second sorted linked list: 2 -> 3 -> 20
        Node b1 = new Node(2);
        Node b2 = new Node(3);
        Node b3 = new Node(20);
        b1.next = b2;
        b2.next = b3;

        System.out.print("First sorted list: ");
        display(a1);
        System.out.print("Second sorted list: ");
        display(b1);

        // Merge the two lists
        Node merged = mergeLists(a1, b1);

        System.out.print("Merged list: ");
        display(merged);
    }
}
7.Given a Doubly Linked List, the task is to reverse the given Doubly Linked List.
Original Linked list 10 8 4 2
Reversed Linked list 2 4 8 10
ans-:
class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

public class ReverseDoublyLinkedList {
    public static Node reverse(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node current = head;
        Node previous = null;

        // Swap prev and next pointers for each node
        while (current != null) {
            Node temp = current.next;
            current.next = previous;
            current.prev = temp;
            previous = current;
            current = temp;
        }

        return previous; // New head of the reversed list
    }

    public static void display(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the original doubly linked list: 10 <-> 8 <-> 4 <-> 2
        Node head = new Node(10);
        Node second = new Node(8);
        Node third = new Node(4);
        Node fourth = new Node(2);
        head.next = second;
        second.prev = head;
        second.next = third;
        third.prev = second;
        third.next = fourth;
        fourth.prev = third;

        System.out.print("Original linked list: ");
        display(head);

        // Reverse the doubly linked list
        Node reversed = reverse(head);

        System.out.print("Reversed linked list: ");
        display(reversed);
    }
}
8.Given a doubly linked list and a position. The task is to delete a node from given position in a doubly linked list.
Input:
LinkedList = 1 <--> 3 <--> 4
x = 3
Output:1 3
Explanation:After deleting the node at
position 3 (position starts from 1),
the linked list will be now as 1->3.

Input:
LinkedList = 1 <--> 5 <--> 2 <--> 9
x = 1
Output:5 2 9
ans-:
class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

public class DeleteNodeFromDoublyLinkedList {
    public static Node deleteNode(Node head, int position) {
        if (head == null) {
            return null;
        }

        // Case 1: Deleting the head node
        if (position == 1) {
            Node newHead = head.next;
            if (newHead != null) {
                newHead.prev = null;
            }
            return newHead;
        }

        Node current = head;
        int count = 1;

        // Traverse to the position to delete the node
        while (current != null && count < position) {
            current = current.next;
            count++;
        }

        // Case 2: Deleting a node in the middle
        if (current != null && current.next != null) {
            Node prevNode = current.prev;
            Node nextNode = current.next;
            prevNode.next = nextNode;
            nextNode.prev = prevNode;
        }

        // Case 3: Deleting the tail node
        if (current != null && current.next == null) {
            Node prevNode = current.prev;
            prevNode.next = null;
        }

        return head;
    }

    public static void display(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Create the doubly linked list: 1 <-> 3 <-> 4
        Node head = new Node(1);
        Node second = new Node(3);
        Node third = new Node(4);
        head.next = second;
        second.prev = head;
        second.next = third;
        third.prev = second;

        System.out.print("Original linked list: ");
        display(head);

        // Delete the node at position 3
        int position = 3;
        Node newHead = deleteNode(head, position);

        System.out.print("Linked list after deleting node at position " + position + ": ");
        display(newHead);
    }
}
















































